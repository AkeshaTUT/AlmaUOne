import React, { useRef, useState } from 'react';

export default function TestCall() {
  const [roomId, setRoomId] = useState('test-room');
  const [isCaller, setIsCaller] = useState(false);
  const [started, setStarted] = useState(false);
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const [log, setLog] = useState('');
  const cameraTestRef = useRef(null);
  const screenTestRef = useRef(null);
  const [audioTest, setAudioTest] = useState(false);

  const logMsg = (msg) => {
    setLog((prev) => prev + '\n' + msg);
    console.log(msg);
  };

  // –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
  const testCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      if (cameraTestRef.current) cameraTestRef.current.srcObject = stream;
      logMsg('[DeviceTest] –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } catch (e) {
      logMsg('[DeviceTest] –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ' + e.name);
      alert('–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ' + e.name);
    }
  };

  // –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const testMic = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      setAudioTest(true);
      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      const source = audioCtx.createMediaStreamSource(stream);
      const analyser = audioCtx.createAnalyser();
      source.connect(analyser);
      logMsg('[DeviceTest] –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      setTimeout(() => {
        stream.getTracks().forEach(track => track.stop());
        setAudioTest(false);
        audioCtx.close();
      }, 3000);
    } catch (e) {
      logMsg('[DeviceTest] –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ' + e.name);
      alert('–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ' + e.name);
    }
  };

  // –¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞
  const testScreen = async () => {
    try {
      const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });
      if (screenTestRef.current) screenTestRef.current.srcObject = stream;
      logMsg('[DeviceTest] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } catch (e) {
      logMsg('[DeviceTest] –û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∞: ' + e.name);
      alert('–û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∞: ' + e.name);
    }
  };

  const startCall = async () => {
    setIsCaller(true);
    setStarted(true);
    await start(true);
  };

  const acceptCall = async () => {
    setIsCaller(false);
    setStarted(true);
    await start(false);
  };

  async function start(isCaller) {
    try {
      const localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      if (localVideoRef.current) localVideoRef.current.srcObject = localStream;
      logMsg('[TestCall] –ü–æ–ª—É—á–µ–Ω localStream: ' + localStream.id);
      logMsg('[TestCall] –ê—É–¥–∏–æ—Ç—Ä–µ–∫–∏: ' + localStream.getAudioTracks().length);
      logMsg('[TestCall] –í–∏–¥–µ–æ—Ç—Ä–µ–∫–∏: ' + localStream.getVideoTracks().length);
      const pc = new RTCPeerConnection({ iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] });
      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));
      pc.ontrack = (event) => {
        if (remoteVideoRef.current) remoteVideoRef.current.srcObject = event.streams[0];
        logMsg('[TestCall] –ü–æ–ª—É—á–µ–Ω remoteStream: ' + event.streams[0].id);
      };
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          window.localStorage.setItem(roomId + (isCaller ? '-caller' : '-callee') + '-ice', JSON.stringify(event.candidate));
          logMsg('[TestCall] ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }
      };
      if (isCaller) {
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        window.localStorage.setItem(roomId + '-offer', JSON.stringify(offer));
        logMsg('[TestCall] Offer —Å–æ–∑–¥–∞–Ω');
      } else {
        const offerStr = window.localStorage.getItem(roomId + '-offer');
        if (!offerStr) return logMsg('[TestCall] –ù–µ—Ç offer');
        const offer = JSON.parse(offerStr);
        await pc.setRemoteDescription(new RTCSessionDescription(offer));
        logMsg('[TestCall] Offer –ø–æ–ª—É—á–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        const answer = await pc.createAnswer();
        await pc.setLocalDescription(answer);
        window.localStorage.setItem(roomId + '-answer', JSON.stringify(answer));
        logMsg('[TestCall] Answer —Å–æ–∑–¥–∞–Ω');
      }
      if (!isCaller) {
        setTimeout(() => {
          const iceStr = window.localStorage.getItem(roomId + '-caller-ice');
          if (iceStr) {
            pc.addIceCandidate(new RTCIceCandidate(JSON.parse(iceStr)));
            logMsg('[TestCall] ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç caller –ø—Ä–∏–º–µ–Ω—ë–Ω');
          }
        }, 2000);
      } else {
        setTimeout(() => {
          const answerStr = window.localStorage.getItem(roomId + '-answer');
          if (answerStr) {
            pc.setRemoteDescription(new RTCSessionDescription(JSON.parse(answerStr)));
            logMsg('[TestCall] Answer –ø–æ–ª—É—á–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          }
          const iceStr = window.localStorage.getItem(roomId + '-callee-ice');
          if (iceStr) {
            pc.addIceCandidate(new RTCIceCandidate(JSON.parse(iceStr)));
            logMsg('[TestCall] ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç callee –ø—Ä–∏–º–µ–Ω—ë–Ω');
          }
        }, 2000);
      }
    } catch (e) {
      logMsg('[TestCall] –û—à–∏–±–∫–∞: ' + e);
    }
  }

  return (
    <div className="min-h-screen bg-[#F8F6FB] p-2 sm:p-8">
      <h1 className="text-lg sm:text-2xl font-bold mb-3 sm:mb-4">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WebRTC —Ç–µ—Å—Ç</h1>
      <div className="mb-3 sm:mb-4 flex flex-col sm:flex-row gap-2 w-full">
        <input value={roomId} onChange={e => setRoomId(e.target.value)} className="border p-2 rounded-md flex-1 text-sm sm:text-base" placeholder="roomId" />
        <button onClick={startCall} className="bg-green-500 text-white px-3 sm:px-4 py-2 rounded-md text-sm sm:text-base">–°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫</button>
        <button onClick={acceptCall} className="bg-blue-500 text-white px-3 sm:px-4 py-2 rounded-md text-sm sm:text-base">–ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫</button>
      </div>
      <div className="mb-3 sm:mb-4 flex flex-col sm:flex-row gap-2 w-full">
        <button onClick={testCamera} className="bg-purple-500 text-white px-3 sm:px-4 py-2 rounded-md text-sm sm:text-base">–¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã</button>
        <button onClick={testMic} className="bg-purple-500 text-white px-3 sm:px-4 py-2 rounded-md text-sm sm:text-base">–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</button>
        <button onClick={testScreen} className="bg-purple-500 text-white px-3 sm:px-4 py-2 rounded-md text-sm sm:text-base">–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞</button>
      </div>
      <div className="flex flex-col sm:flex-row gap-2 sm:gap-4 mb-3 sm:mb-4 w-full">
        <div className="flex-1">
          <div className="text-xs sm:text-sm mb-1">–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ</div>
          <video ref={localVideoRef} autoPlay playsInline muted width={320} height={180} className="w-full max-w-xs sm:max-w-full rounded bg-[#222]" />
        </div>
        <div className="flex-1">
          <div className="text-xs sm:text-sm mb-1">Remote –≤–∏–¥–µ–æ</div>
          <video ref={remoteVideoRef} autoPlay playsInline width={320} height={180} className="w-full max-w-xs sm:max-w-full rounded bg-[#222]" />
        </div>
      </div>
      <div className="flex flex-col sm:flex-row gap-2 sm:gap-4 mb-3 sm:mb-4 w-full">
        <div className="flex-1">
          <div className="text-xs sm:text-sm mb-1">–¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã</div>
          <video ref={cameraTestRef} autoPlay playsInline muted width={160} height={90} className="w-full max-w-xs sm:max-w-full rounded bg-[#222]" />
        </div>
        <div className="flex-1">
          <div className="text-xs sm:text-sm mb-1">–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∞</div>
          <video ref={screenTestRef} autoPlay playsInline muted width={160} height={90} className="w-full max-w-xs sm:max-w-full rounded bg-[#222]" />
        </div>
        <div className="flex-1">
          <div className="text-xs sm:text-sm mb-1">–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</div>
          <div className="w-full max-w-xs sm:max-w-full h-16 sm:h-24 rounded bg-[#222] text-white flex items-center justify-center">
            {audioTest ? 'üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ...' : '‚Äî'}
          </div>
        </div>
      </div>
      <pre className="bg-gray-100 p-2 rounded h-32 sm:h-48 overflow-auto text-xs w-full">{log}</pre>
      <div className="text-xs text-gray-500 mt-2">1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–º–µ—Ä—É, –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —ç–∫—Ä–∞–Ω.<br/>2. –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –¥–≤—É—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π roomId. –í –æ–¥–Ω–æ–π –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫", –≤ –¥—Ä—É–≥–æ–π ‚Äî "–ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫".</div>
    </div>
  );
} 