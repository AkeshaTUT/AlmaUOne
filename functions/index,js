const functions = require('firebase-functions');
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config({ path: '.coursera.env' });
require('dotenv').config({ path: '.hh.env' });

const app = express();
app.use(cors());

// Coursera config
const COURSERA_API_KEY = process.env.COURSERA_API_KEY;
const COURSERA_API_SECRET = process.env.COURSERA_API_SECRET;
const COURSERA_API_BASE_URL = process.env.COURSERA_API_BASE_URL;
const DEFAULT_LANGUAGE = process.env.DEFAULT_LANGUAGE || 'ru';
const DEFAULT_LIMIT = process.env.DEFAULT_LIMIT || 20;
const DEFAULT_LEVEL = process.env.DEFAULT_LEVEL || 'beginner';
const CACHE_DURATION = process.env.CACHE_DURATION || 3600;

// HH.ru config
const HH_ACCESS_TOKEN = process.env.HH_ACCESS_TOKEN;
const HH_TOKEN_TYPE = process.env.HH_TOKEN_TYPE || 'Bearer';
const HH_USER_AGENT = process.env.HH_USER_AGENT || 'AlmaUOne/1.0 (alma-u-one@example.com)';

// Кэш (в памяти, сбрасывается при перезапуске функции)
const cache = new Map();

// Coursera endpoint
app.get('/api/courses', async (req, res) => {
  try {
    const cacheKey = JSON.stringify(req.query);
    const cachedData = cache.get(cacheKey);
    if (cachedData && Date.now() - cachedData.timestamp < CACHE_DURATION * 1000) {
      return res.json(cachedData.data);
    }

    const params = new URLSearchParams();
    params.set('q', 'search');
    if (req.query.q) params.set('query', req.query.q);
    params.set('limit', req.query.limit || DEFAULT_LIMIT);
    params.set('language', req.query.language || DEFAULT_LANGUAGE);
    params.set('level', req.query.level || DEFAULT_LEVEL);
    if (req.query.category) params.set('category', req.query.category);

    const auth = Buffer.from(`${COURSERA_API_KEY}:${COURSERA_API_SECRET}`).toString('base64');
    const url = `${COURSERA_API_BASE_URL}?${params.toString()}`;
    const response = await fetch(url, {
      headers: {
        'Authorization': `Basic ${auth}`,
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      return res.status(response.status).json({ error: 'Coursera API error', status: response.status, details: errorText });
    }

    const data = await response.json();
    const transformedData = {
      elements: (data.elements || []).map(course => ({
        id: course.id,
        name: course.name,
        description: course.description,
        instructorName: course.instructorName || 'Coursera Instructor',
        rating: course.rating || 0,
        numReviews: course.numReviews || 0,
        enrolledCount: course.enrolledCount || 0,
        duration: course.duration || course.estimatedEffort || '',
        level: course.level || DEFAULT_LEVEL,
        category: course.category,
        photoUrl: course.photoUrl || 'https://example.com/default-course.jpg',
        url: course.url,
        price: course.price || 0,
        language: course.language || DEFAULT_LANGUAGE,
        skills: course.skills || []
      }))
    };

    cache.set(cacheKey, { data: transformedData, timestamp: Date.now() });
    res.json(transformedData);
  } catch (e) {
    res.status(500).json({ error: 'Server error', details: e.message });
  }
});

// HH.ru endpoint
app.get('/api/hh', async (req, res) => {
  try {
    const response = await fetch(`https://api.hh.ru/vacancies?${new URLSearchParams(req.query)}`, {
      headers: {
        'Authorization': `${HH_TOKEN_TYPE} ${HH_ACCESS_TOKEN}`,
        'HH-User-Agent': HH_USER_AGENT
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      return res.status(response.status).json({ error: 'HH.ru API error', status: response.status, details: errorText });
    }

    const data = await response.json();
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: 'Server error', details: e.message });
  }
});

// Экспортируем express app как функцию
exports.api = functions.https.onRequest(app);